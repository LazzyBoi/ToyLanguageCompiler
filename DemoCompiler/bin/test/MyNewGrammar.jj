/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyNewGrammar.jj */
/*@egen*//********* WRITEN BY ZZG *********/
/******** DATE: 12,25,2017 *******/
/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
  //LOOKAHEAD=1;
}

PARSER_BEGIN(MyNewGrammar)
package test;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import util.*;

public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();

/*@egen*/
  public static void main(String args [])
  {
    FileInputStream fileStream;
    try
    {
      fileStream = new FileInputStream("test3.c");			 //\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u8282\u6b64\u8fbe\u62f7\u951f\u776b\u9769\u62f7test1.c,test2.c,test3.c
      MyNewGrammar parser = new MyNewGrammar(fileStream);
      System.out.println("Reading from file ...");
      try
      {
        SimpleNode rootNode = parser.Start();
        rootNode.dump(" "); //\u6293\u53d6\u951f\u65a4\u62f7\u951f\u622a\u7889\u62f7\u951f\u65a4\u6cd5\u951f\u65a4\u62f7\u951f\u65a4\u62f7    
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
    }
    catch (FileNotFoundException e1)
    {
      // TODO Auto-generated catch block
      e1.printStackTrace();
    }
  }
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN :
{
  < CONSTANT :
    (< DIGIT >)+
    (
      "." (< DIGIT >)+
    )? >
| < DIGIT : [ "0"-"9" ] >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
  >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN : /* KEYWORDS */
{
  < MAIN : "main" >
| < INT : "int" >
| < FLOAT : "real" >
| < VOID : "void" >
| < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < FOR : "for" >
| < RETURN : "return" >
| <THEN :"then">
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
}

TOKEN : /* RELATIONSHIPOPERATOR */
{
  < LT : "<" >
| < LE : "<=" >
| < GT : ">" >
| < GE : ">=" >
| < EQ : "==" >
| < NE : "!=" >
}

TOKEN : /* BOOLOPERATOR */
{
  < AND : "&&" >
| < OR : "||" >
| < NOT : "!" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
}

TOKEN :
{
  < LC : "(" >
| < RC : ")" >
| < LM : "[" >
| < RM : "]" >
| < LB : "{" >
| < RB : "}" >
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
 SimpleNode jjtn000 = new SimpleNode(JJTSTART);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/QTTable qtTable = new QTTable();}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Expression(qtTable)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    QTInfo END = new QTInfo("", "", "", "");
    qtTable.addQTInfo(END);
    //qtTable.trueChain.add(END);
    //qtTable.falseChain.add(END);
    qtTable.mergeFalseChain();
    qtTable.mergeTrueChain();
    qtTable.printQTTable();
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u7ecb\u5b2a\u7c2d
void Expression(QTTable qtTable) :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  < LB > MainStatement(qtTable) < RB >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MainStatement(QTTable qtTable) :
{/*@bgen(jjtree) MainStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTMAINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MainStatement */
  try {
/*@egen*/
  Statement(qtTable)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ //|(MainStatement())*		
}

void Statement(QTTable qtTable) :
{/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  (
    SequenceStatement(qtTable)						
  | IfStatement(qtTable)							 
  | While(qtTable)
  | Expression(qtTable)
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/							
}

//\u987a\u951f\u65a4\u62f7
void SequenceStatement(QTTable qtTable) :
{/*@bgen(jjtree) SequenceStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQUENCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SequenceStatement */
  try {
/*@egen*/
  (
    declaration(qtTable)
  | copy(qtTable)
  )
  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/			 //\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u9175\u9769\u62f7\u503c
}

void declaration(QTTable qtTable) :
{/*@bgen(jjtree) declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token first, middle;
  Token eq = null;
}
{/*@bgen(jjtree) declaration */
  try {
/*@egen*/
  //\u6bcf\u951f\u53eb\u8bb9\u62f7\u951f\u65a4\u62f7\u4e00\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u4ecb\uff0c\u951f\u65a4\u62f7\u951f\u7f34\u8bb9\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7
  (
    < INT >
  | < FLOAT >
  )
  middle = < IDENTIFIER >
  (
    eq = < ASSIGN > first = < CONSTANT >
    {
      QTInfo qt = new QTInfo(eq.image, first.image, "_", middle.image);
      qtTable.addQTInfo(qt);
    }	
    //\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u53ea\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u4fa5\u7889\u62f7\u4e00\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u503c\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u63a5\u7b79\u62f7\u951f\u65a4\u62f7,\u951f\u65a4\u62f7\u951f\u7686\u7334\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u503c\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u74d2\ue7d2\u62f7\u951f\u7d5dirst\u951f\u65a4\u62f7middle\u4e3aToken\u951f\u65a4\u62f7\u951f\u65a4\u62f7
  )?
  ("," < IDENTIFIER >)* 
  (< LM > < CONSTANT > < RM >)*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/	 //\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u7ef4
}

void copy(QTTable qtTable) :
{/*@bgen(jjtree) copy */
  SimpleNode jjtn000 = new SimpleNode(JJTCOPY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first;
  Token middle;
  Token eq = null;
}
{/*@bgen(jjtree) copy */
  try {
/*@egen*/
  (middle = < IDENTIFIER >) (eq = < ASSIGN >)
  (
    first = expression(qtTable)
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    QTInfo qt = new QTInfo(eq.image, first, "_", middle.image);
    qtTable.addQTInfo(qt);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u951f\u65a4\u62f7\u951f\u65a4\u62f7
void IfStatement(QTTable qtTable) :
{/*@bgen(jjtree) IfStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String skipStr;
  QTInfo pre;
}
{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/
  //LOOKAHEAD(3)
  < IF > < LC > BoolExpression(qtTable) < RC > < THEN >	//Condition(qtTable)
  {
    pre = qtTable.getLastQt();
  }
//  (
//    (
//      (
//        assign(qtTable) ";" //{qtTable.mergeTrueChain(qtTable.getLastQt().getInnerIdSeqen());}
//        					
//      )
//    |
//      (
//        { //
//        		}
//        //LOOKAHEAD(3)
//        Expression(qtTable)|IfStatement(qtTable)|While(qtTable)
//        {
//		}
//        
//      )
//    )
//      	SequenceStatement(qtTable)						 //\u987a\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\ufffd
//  		| IfStatement(qtTable)							 //\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\ufffd
//  		| While(qtTable)
	Statement(qtTable) 
    { } 
    //\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u8f6c\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u5f0f\u65f6\u5e94\u951f\u65a4\u62f7\u951f\u89d2\u9769\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u7261\u951f\u63ed\u4f19\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u8f7f\u4f19\u62f7\u951f\ufffd
  //) //\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u4e3a\u951f\u65a4\u62f7\u6267\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u867e\u951f\u65a4\u62f7\u951f\u9636\ue04e\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u7d5clse\u951f\u65a4\u62f7\u951f\u4ecb\uff09
  ElseStatement(qtTable)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ElseStatement(QTTable qtTable) :
{/*@bgen(jjtree) ElseStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTELSESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String skipStr;}
{/*@bgen(jjtree) ElseStatement */
  try {
/*@egen*/
  < ELSE >
  {
    skipStr = VariableNameGenerator.genVariableName();
    QTInfo qt1 = new QTInfo("J", "_", "_", skipStr);
    qtTable.addQTInfo(qt1);
    qtTable.trueChain.add(qt1);
  }
// (
//       assign(qtTable) ";" //{qtTable.mergeTrueChain(qtTable.getLastQt().getInnerIdSeqen());}       					
//      )
//    |
//      (
//        { //
//        		}
//        Expression(qtTable)|SequenceStatement(qtTable)|IfStatement(qtTable)|While(qtTable)
//        {
//		}
//        
//      )
//		SequenceStatement(qtTable)						 //\u987a\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\ufffd
//  		| IfStatement(qtTable)							 //\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\ufffd
//  		| While(qtTable)
  		Statement(qtTable)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    qtTable.falseChain.add(qtTable.getLastQt());
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u4e3a\u4f7f\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u6a21\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u7313\u7427opy()\u951f\u65a4\u62f7assign()\u5b9e\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u540c
void assign(QTTable qtTable) :
{/*@bgen(jjtree) assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first;
  Token middle;
  Token eq = null;
}
{/*@bgen(jjtree) assign */
  try {
/*@egen*/
  (middle = < IDENTIFIER >) (eq = < ASSIGN >)
  (
    first = expression(qtTable)
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    QTInfo qt = new QTInfo(eq.image, first, "_", middle.image);
    qtTable.addQTInfo(qt);
    qtTable.trueChain.add(qt);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u7ede\ufffd
String BoolExpression(QTTable qtTable) :								 //\u951f\u65a4\u62f7
{/*@bgen(jjtree) BoolExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String newTemp=null,left=null,right=null;
}
{/*@bgen(jjtree) BoolExpression */
  try {
/*@egen*/
  left = AndExp(qtTable)
  {
  }
  (
    < OR > 
     right = AndExp(qtTable)
    {
      //\u951f\u89d2\u7334\u62f7\u951f\u65a4\u62f7\u951f\u7aed\u51e4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\ufffd+1
      //qtTable.mergeFalseChain();
      //qtTable.falseChain.clear();
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String AndExp(QTTable qtTable) :										 //\u951f\u65a4\u62f7
{/*@bgen(jjtree) AndExp */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String newTemp=null,left=null,right=null;
}
{/*@bgen(jjtree) AndExp */
  try {
/*@egen*/
  left = NotExp(qtTable)
  {
    newTemp=left;
  }
  (
    < AND > {//\u951f\u89d2\u7334\u62f7\u951f\u65a4\u62f7\u951f\u7aed\u51e4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\ufffd+1
      qtTable.mergeFalseChain();
       }
	 right = NotExp(qtTable)
    {//\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7
      //qtTable.mergeTrueChain();
      //qtTable.trueChain.clear();
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;	
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String NotExp(QTTable qtTable) :
{/*@bgen(jjtree) NotExp */
  SimpleNode jjtn000 = new SimpleNode(JJTNOTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String Temp=null;	
  int tag = 0;
}	 //\u951f\u65a4\u62f7
{/*@bgen(jjtree) NotExp */
  try {
/*@egen*/
  (< NOT >{tag = 1;})?
	Temp=Condition(qtTable)
  {
    	
    /*enter = VariableNameGenerator.genVariableName();
    QTInfo qt1 = new QTInfo("JNZ",newTemp, "_", enter);
    qtTable.addQTInfo(qt1);*/
    
    /*	//\u951f\u53eb\u8bb9\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7:if(a)\u951f\u4fa5\u51e4\u62f7\u951f\u65a4\u62f7\u503c\u951f\u89d2\u51e4\u62f7\u4e3a\u951f\u65a4\u62f7
    int value=Integer.parseInt(newTemp);
    if (value == 0 && tag == 0) return false;
    else if (value == 0 && tag == 1) return true;
    else if (value != 0 && tag == 0) return true;
    else if (value != 0 && tag == 1) return false;
    */
  }/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  return Temp;
	 }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u951f\u65a4\u62f7\u7cfb\u951f\u65a4\u62f7\u951f\u7ede\ufffd
String Condition(QTTable qtTable) :
{/*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String left=null, right=null, newTemp = null, falseStr, trueStr;
  Token rp=null;
  QTInfo pre;
}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  (
    left = expression(qtTable) {newTemp=left; }
    (
      //<,<=,>,>=,==,!=
      (
        rp = < LT >
      | rp = < LE >
      | rp = < GT >
      | rp = < GE >
      | rp = < EQ >
      | rp = < NE >
      )
      right = expression(qtTable)
      {
      newTemp = VariableNameGenerator.genVariableName();
      falseStr = VariableNameGenerator.genVariableName();
      QTInfo qt1 = new QTInfo("J" + rp.image, left, right, newTemp);
      qtTable.addQTInfo(qt1);
      qtTable.trueChain.add(qt1);

      QTInfo qt2 = new QTInfo("J", "_", "_", falseStr);
      qtTable.addQTInfo(qt2);
      qtTable.falseChain.add(qt2);        
      }
    )*
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	 if(right==null)
    {
        String enter = VariableNameGenerator.genVariableName();
    	QTInfo qt1 = new QTInfo("JNZ",newTemp, "_", enter);
    	qtTable.addQTInfo(qt1);
    	qtTable.trueChain.add(qt1);
    	
    	String newTemp2=VariableNameGenerator.genVariableName();
   		QTInfo qt2 = new QTInfo("J","_", "_", newTemp2);
    	//qt2.setResult(qt2.getInnerIdSeqen()+1);
    	qtTable.addQTInfo(qt2);
    	qtTable.falseChain.add(qt2);
    }
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u951f\u65a4\u62f7\u951f\u7ede\ufffd
String expression(QTTable qtTable) :
{/*@bgen(jjtree) expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first, middle, newTemp;
  Token op;
}
{/*@bgen(jjtree) expression */
  try {
/*@egen*/	
  first = term(qtTable)
  {
    newTemp = first;
  }
  (
    (
      op = < PLUS >
    | op = < MINUS >
    )
    middle = term(qtTable)
    {
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);
      qtTable.addQTInfo(qt);
      first = newTemp;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String term(QTTable qtTable) :
{/*@bgen(jjtree) term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first=null, middle=null, newTemp=null;
  Token op;
}
{/*@bgen(jjtree) term */
  try {
/*@egen*/
  first = unary(qtTable)
  {
    newTemp = first;
  }
  (
    (
      op = < MULTIPLY >
    | op = < DIVIDE >
    )
    middle = unary(qtTable)
    {
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);
      qtTable.addQTInfo(qt);
      first = newTemp;			
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
   
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String unary(QTTable qtTable) :
{/*@bgen(jjtree) unary */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String str = null;
  Token token = null;
}
{/*@bgen(jjtree) unary */
  try {
/*@egen*/
  (
    token = < IDENTIFIER >
    {
      str = token.image;
    }
  | 
    token = < CONSTANT >
    {
      str = token.image;
    }
  |
    (
      < LC > str = expression(qtTable) < RC >
    )
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {
    return str;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u5faa\u951f\u65a4\u62f7
void While(QTTable qtTable) :
{/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
  try {
/*@egen*/
  //\u652f\u951f\u8857\u9769\u62f7\u503c\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u59d0\u3001\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u4ecb\u3001\u5faa\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u65a4\u62f7\u951f\u89d2\u8bb9\u62f7\u951f\u7d59ut\u76ee\u524d\u53ea\u652f\u951f\u8857\u9769\u62f7\u503c\u951f\u65a4\u62f7\u6d0c\ufffd(#^_^#)
  < WHILE > < LC > Condition(qtTable) < RC >
//  (
//    (
//    copy(qtTable)
//  	)*
//  ";")
	
	Statement(qtTable)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
