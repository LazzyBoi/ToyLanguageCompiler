/* Generated By:JJTree&JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package test;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CONSTANT = 7;
  /** RegularExpression Id. */
  int DIGIT = 8;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 9;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 10;
  /** RegularExpression Id. */
  int HEX_LITERAL = 11;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 12;
  /** RegularExpression Id. */
  int MAIN = 13;
  /** RegularExpression Id. */
  int INT = 14;
  /** RegularExpression Id. */
  int FLOAT = 15;
  /** RegularExpression Id. */
  int VOID = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int ELSE = 18;
  /** RegularExpression Id. */
  int WHILE = 19;
  /** RegularExpression Id. */
  int FOR = 20;
  /** RegularExpression Id. */
  int RETURN = 21;
  /** RegularExpression Id. */
  int THEN = 22;
  /** RegularExpression Id. */
  int PLUS = 23;
  /** RegularExpression Id. */
  int MINUS = 24;
  /** RegularExpression Id. */
  int MULTIPLY = 25;
  /** RegularExpression Id. */
  int DIVIDE = 26;
  /** RegularExpression Id. */
  int ASSIGN = 27;
  /** RegularExpression Id. */
  int LT = 28;
  /** RegularExpression Id. */
  int LE = 29;
  /** RegularExpression Id. */
  int GT = 30;
  /** RegularExpression Id. */
  int GE = 31;
  /** RegularExpression Id. */
  int EQ = 32;
  /** RegularExpression Id. */
  int NE = 33;
  /** RegularExpression Id. */
  int AND = 34;
  /** RegularExpression Id. */
  int OR = 35;
  /** RegularExpression Id. */
  int NOT = 36;
  /** RegularExpression Id. */
  int IDENTIFIER = 37;
  /** RegularExpression Id. */
  int LETTER = 38;
  /** RegularExpression Id. */
  int LC = 39;
  /** RegularExpression Id. */
  int RC = 40;
  /** RegularExpression Id. */
  int LM = 41;
  /** RegularExpression Id. */
  int RM = 42;
  /** RegularExpression Id. */
  int LB = 43;
  /** RegularExpression Id. */
  int RB = 44;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<CONSTANT>",
    "<DIGIT>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "\"main\"",
    "\"int\"",
    "\"real\"",
    "\"void\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "\"return\"",
    "\"then\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
  };

}
