/* Generated By:JJTree&JavaCC: Do not edit this line. CMinusParserConstants.java */
package Demo;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CMinusParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EXPONENT = 12;
  /** RegularExpression Id. */
  int FRACTION = 13;
  /** RegularExpression Id. */
  int REALNUMBER = 14;
  /** RegularExpression Id. */
  int NUM = 15;
  /** RegularExpression Id. */
  int ELSE = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int INT = 18;
  /** RegularExpression Id. */
  int RETURN = 19;
  /** RegularExpression Id. */
  int VOID = 20;
  /** RegularExpression Id. */
  int WHILE = 21;
  /** RegularExpression Id. */
  int REAL = 22;
  /** RegularExpression Id. */
  int THEN = 23;
  /** RegularExpression Id. */
  int ID = 24;
  /** RegularExpression Id. */
  int letter = 25;
  /** RegularExpression Id. */
  int intnumber = 26;
  /** RegularExpression Id. */
  int digit = 27;
  /** RegularExpression Id. */
  int LPAREN = 28;
  /** RegularExpression Id. */
  int RPAREN = 29;
  /** RegularExpression Id. */
  int LBRACE = 30;
  /** RegularExpression Id. */
  int RBRACE = 31;
  /** RegularExpression Id. */
  int LBRACKET = 32;
  /** RegularExpression Id. */
  int RBRACKET = 33;
  /** RegularExpression Id. */
  int SEMICOLON = 34;
  /** RegularExpression Id. */
  int COMMA = 35;
  /** RegularExpression Id. */
  int DOT = 36;
  /** RegularExpression Id. */
  int PLUS = 37;
  /** RegularExpression Id. */
  int MINUS = 38;
  /** RegularExpression Id. */
  int STAR = 39;
  /** RegularExpression Id. */
  int SLASH = 40;
  /** RegularExpression Id. */
  int ASSIGN = 41;
  /** RegularExpression Id. */
  int LT = 42;
  /** RegularExpression Id. */
  int RT = 43;
  /** RegularExpression Id. */
  int EQ = 44;
  /** RegularExpression Id. */
  int LE = 45;
  /** RegularExpression Id. */
  int GE = 46;
  /** RegularExpression Id. */
  int NE = 47;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;
  /** Lexical state. */
  int WithinComment2 = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 6>",
    "\"/*\"",
    "\"*/\"",
    "\"//\"",
    "\"\\n\"",
    "<token of kind 11>",
    "<EXPONENT>",
    "<FRACTION>",
    "<REALNUMBER>",
    "<NUM>",
    "\"else\"",
    "\"if\"",
    "\"int\"",
    "\"return\"",
    "\"void\"",
    "\"while\"",
    "\"real\"",
    "\"then\"",
    "<ID>",
    "<letter>",
    "<intnumber>",
    "<digit>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
  };

}
